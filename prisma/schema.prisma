generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model contest_participants {
  id                   Int           @id @default(autoincrement())
  contest_id           Int
  wallet_address       String        @db.VarChar(44)
  joined_at            DateTime      @default(now()) @db.Timestamptz(6)
  initial_dxd_points   Decimal?      @default(0) @db.Decimal(20, 0)
  current_dxd_points   Decimal?      @default(0) @db.Decimal(20, 0)
  rank                 Int?
  prize_amount         Decimal?      @db.Decimal(20, 0)
  prize_paid_at        DateTime?     @db.Timestamptz(6)
  refund_amount        Decimal?      @db.Decimal(20, 0)
  refunded_at          DateTime?     @db.Timestamptz(6)
  entry_transaction_id Int?
  entry_time           DateTime      @default(now()) @db.Timestamptz(6)
  final_rank           Int?
  prize_transaction_id Int?
  contests             contests      @relation(fields: [contest_id], references: [id], onDelete: Cascade)
  entry_transaction    transactions? @relation("contest_participants_entry_transaction_idTotransactions", fields: [entry_transaction_id], references: [id])
  prize_transaction    transactions? @relation("contest_participants_prize_transaction_idTotransactions", fields: [prize_transaction_id], references: [id])
  users                users         @relation(fields: [wallet_address], references: [wallet_address])

  @@unique([contest_id, wallet_address])
  @@index([wallet_address])
  @@map("contest_participants")
}

model contest_portfolios {
  id             Int      @id @default(autoincrement())
  contest_id     Int
  wallet_address String   @db.VarChar(44)
  token_id       Int
  weight         Int
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  contests       contests @relation(fields: [contest_id], references: [id], onDelete: Cascade)
  tokens         tokens   @relation(fields: [token_id], references: [id])
  users          users    @relation(fields: [wallet_address], references: [wallet_address])

  @@unique([contest_id, wallet_address, token_id])
  @@index([wallet_address])
  @@index([token_id])
  @@map("contest_portfolios")
}

model contest_templates {
  id                  Int       @id @default(autoincrement())
  name                String
  description         String?
  duration_minutes    Int?
  entry_fee           Decimal?  @default(0) @db.Decimal(20, 0)
  max_participants    Int?      @default(2)
  bucket_requirements Json?     @default("{}")
  scoring_rules       Json?     @default("{}")
  is_active           Boolean?  @default(true)
  created_at          DateTime? @default(now()) @db.Timestamptz(6)

  @@index([name], map: "idx_contest_templates_name")
  @@map("contest_templates")
}

model contest_token_buckets {
  contest_id Int
  token_id   Int
  bucket_id  Int
  contests   contests @relation(fields: [contest_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tokens     tokens   @relation(fields: [token_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([contest_id, token_id, bucket_id])
  @@index([contest_id], map: "idx_contest_token_buckets_contest")
  @@index([token_id], map: "idx_contest_token_buckets_token")
  @@map("contest_token_buckets")
}

model contest_token_performance {
  id             Int      @id @default(autoincrement())
  contest_id     Int
  wallet_address String   @db.VarChar(44)
  token_id       Int
  profit_loss    Decimal  @default(0) @db.Decimal(20, 8)
  timestamp      DateTime @default(now()) @db.Timestamptz(6)
  contests       contests @relation(fields: [contest_id], references: [id], onDelete: Cascade)
  tokens         tokens   @relation(fields: [token_id], references: [id])
  users          users    @relation(fields: [wallet_address], references: [wallet_address])

  @@index([contest_id])
  @@index([wallet_address])
  @@index([token_id])
  @@map("contest_token_performance")
}

model contest_token_prices {
  id             Int      @id @default(autoincrement())
  contest_id     Int
  wallet_address String   @db.VarChar(44)
  token_id       Int
  amount         Decimal  @default(0) @db.Decimal(20, 0)
  price          Decimal  @db.Decimal(20, 8)
  timestamp      DateTime @default(now()) @db.Timestamptz(6)
  contests       contests @relation(fields: [contest_id], references: [id], onDelete: Cascade)
  tokens         tokens   @relation(fields: [token_id], references: [id])
  users          users    @relation(fields: [wallet_address], references: [wallet_address])

  @@index([contest_id])
  @@index([wallet_address])
  @@index([token_id])
  @@map("contest_token_prices")
}

model contest_portfolio_trades {
  id             Int       @id @default(autoincrement())
  contest_id     Int
  wallet_address String    @db.VarChar(44)
  token_id       Int
  type           TradeType
  old_weight     Int
  new_weight     Int
  price_at_trade Decimal   @db.Decimal(20, 8)
  virtual_amount Decimal   @db.Decimal(20, 0)
  executed_at    DateTime  @default(now()) @db.Timestamptz(6)
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  contests       contests  @relation(fields: [contest_id], references: [id], onDelete: Cascade)
  tokens         tokens    @relation(fields: [token_id], references: [id])
  users          users     @relation(fields: [wallet_address], references: [wallet_address])

  @@index([contest_id])
  @@index([wallet_address])
  @@index([token_id])
  @@map("contest_portfolio_trades")
}

model contests {
  id                        Int                         @id @default(autoincrement())
  contest_code              String                      @unique
  token_mint                String?                     @db.VarChar(44)
  name                      String
  description               String?
  start_time                DateTime                    @db.Timestamptz(6)
  end_time                  DateTime                    @db.Timestamptz(6)
  entry_fee                 Decimal?                    @default(0) @db.Decimal(20, 8)
  prize_pool                Decimal                     @default(0) @db.Decimal(20, 0)
  current_prize_pool        Decimal                     @default(0) @db.Decimal(20, 0)
  status                    contest_status              @default(pending)
  settings                  Json?                       @default("{}")
  created_at                DateTime                    @default(now()) @db.Timestamptz(6)
  allowed_buckets           Int[]
  participant_count         Int                         @default(0)
  min_participants          Int                         @default(2)
  max_participants          Int?
  cancelled_at              DateTime?                   @db.Timestamptz(6)
  completed_at              DateTime?                   @db.Timestamptz(6)
  cancellation_reason       String?
  ai_decisions              ai_decisions[]
  blockchain_transactions   blockchain_transactions[]
  contest_participants      contest_participants[]
  contest_portfolio_trades  contest_portfolio_trades[]
  contest_portfolios        contest_portfolios[]
  contest_token_buckets     contest_token_buckets[]
  contest_token_performance contest_token_performance[]
  contest_token_prices      contest_token_prices[]
  contest_wallets           contest_wallets?
  transactions              transactions[]
  vanity_wallet             vanity_wallet_pool?

  @@index([status])
  @@index([start_time])
  @@index([end_time])
  @@map("contests")
}

model token_bucket_memberships {
  bucket_id     Int
  token_id      Int
  token_buckets token_buckets @relation(fields: [bucket_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tokens        tokens        @relation(fields: [token_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([bucket_id, token_id])
  @@index([token_id], map: "idx_token_bucket_memberships_token")
  @@map("token_bucket_memberships")
}

model token_buckets {
  id                       Int                        @id @default(autoincrement())
  bucket_code              String                     @unique(map: "unique_token_bucket_code")
  name                     String
  description              String?
  created_at               DateTime?                  @default(now()) @db.Timestamptz(6)
  token_bucket_memberships token_bucket_memberships[]

  @@index([bucket_code], map: "idx_token_buckets_code")
  @@map("token_buckets")
}

model token_prices {
  token_id   Int       @id
  price      Decimal   @db.Decimal(20, 8)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  tokens     tokens    @relation(fields: [token_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([updated_at(sort: Desc)], map: "idx_token_prices_updated")
  @@map("token_prices")
}

model tokens {
  id                        Int                         @id @default(autoincrement())
  address                   String                      @unique(map: "unique_token_address")
  symbol                    String                      @unique(map: "unique_token_symbol")
  name                      String
  decimals                  Int?                        @default(18)
  is_active                 Boolean?                    @default(true)
  created_at                DateTime?                   @default(now()) @db.Timestamptz(6)
  market_cap                Decimal?                    @db.Decimal(20, 0)
  change_24h                Decimal?                    @db.Decimal(5, 2)
  volume_24h                Decimal?                    @db.Decimal(20, 0)
  image_url                 String?                     @db.VarChar(255)
  description               String?
  twitter_url               String?                     @db.VarChar(255)
  telegram_url              String?                     @db.VarChar(255)
  discord_url               String?                     @db.VarChar(255)
  website_url               String?                     @db.VarChar(255)
  ai_decisions              ai_decisions[]
  contest_portfolio_trades  contest_portfolio_trades[]
  contest_portfolios        contest_portfolios[]
  contest_token_buckets     contest_token_buckets[]
  contest_token_performance contest_token_performance[]
  contest_token_prices      contest_token_prices[]
  token_bucket_memberships  token_bucket_memberships[]
  token_prices              token_prices?

  @@index([symbol], map: "idx_tokens_symbol")
  @@map("tokens")
}

model transactions {
  id                                                                           Int                    @id @default(autoincrement())
  wallet_address                                                               String?
  type                                                                         transaction_type
  amount                                                                       Decimal                @db.Decimal(20, 0)
  balance_before                                                               Decimal                @db.Decimal(20, 0)
  balance_after                                                                Decimal                @db.Decimal(20, 0)
  contest_id                                                                   Int?
  description                                                                  String?
  status                                                                       transaction_status?    @default(completed)
  metadata                                                                     Json?                  @default("{}")
  created_at                                                                   DateTime?              @default(now()) @db.Timestamptz(6)
  processed_at                                                                 DateTime?              @db.Timestamptz(6)
  contest_participants_contest_participants_entry_transaction_idTotransactions contest_participants[] @relation("contest_participants_entry_transaction_idTotransactions")
  contest_participants_contest_participants_prize_transaction_idTotransactions contest_participants[] @relation("contest_participants_prize_transaction_idTotransactions")
  referral_rewards                                                             referral_rewards[]
  contests                                                                     contests?              @relation(fields: [contest_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users                                                                        users?                 @relation(fields: [wallet_address], references: [wallet_address], onDelete: NoAction, onUpdate: NoAction)

  @@index([contest_id], map: "idx_transactions_contest")
  @@index([type, created_at], map: "idx_transactions_type_created")
  @@index([wallet_address], map: "idx_transactions_wallet")
  @@map("transactions")
}

model user_achievements {
  id               Int       @id @default(autoincrement())
  wallet_address   String?
  achievement_type String
  value            Json?     @default("{}")
  achieved_at      DateTime? @default(now()) @db.Timestamptz(6)
  tier             String    @default("BRONZE") @db.VarChar(20)
  category         String    @default("CONTESTS") @db.VarChar(20)
  xp_awarded       Int       @default(0)
  context          Json?     @default("{}")
  user             users?    @relation(fields: [wallet_address], references: [wallet_address], onUpdate: NoAction)

  @@index([wallet_address], map: "idx_user_achievements_wallet")
  @@index([achievement_type], map: "idx_user_achievements_type")
  @@index([category], map: "idx_user_achievements_category")
  @@index([tier], map: "idx_user_achievements_tier")
  @@map("user_achievements")
}

model user_social_profiles {
  wallet_address    String
  platform          String
  platform_user_id  String
  username          String
  verified          Boolean?  @default(false)
  verification_date DateTime? @db.Timestamptz(6)
  last_verified     DateTime? @db.Timestamptz(6)
  metadata          Json?     @default("{}")
  created_at        DateTime? @default(now()) @db.Timestamptz(6)
  updated_at        DateTime? @default(now()) @db.Timestamptz(6)

  @@id([wallet_address, platform])
  @@unique([platform, platform_user_id], map: "unique_platform_user")
  @@index([platform, platform_user_id], map: "idx_user_social_profiles_platform")
  @@map("user_social_profiles")
}

model user_stats {
  wallet_address    String    @id
  contests_entered  Int?      @default(0)
  contests_won      Int?      @default(0)
  total_prize_money Decimal?  @default(0) @db.Decimal(20, 0)
  best_score        Decimal?  @db.Decimal(10, 2)
  avg_score         Decimal?  @db.Decimal(10, 2)
  last_updated      DateTime? @default(now()) @db.Timestamptz(6)
  users             users     @relation(fields: [wallet_address], references: [wallet_address], onDelete: NoAction, onUpdate: NoAction)

  @@index([wallet_address], map: "idx_user_stats_wallet")
  @@map("user_stats")
}

model user_token_stats {
  wallet_address       String
  token_address        String
  times_picked         Int?     @default(0)
  wins_with_token      Int?     @default(0)
  avg_score_with_token Decimal? @db.Decimal(10, 2)

  @@id([wallet_address, token_address])
  @@index([wallet_address], map: "idx_user_token_stats_wallet")
  @@index([token_address], map: "idx_user_token_stats_token")
  @@map("user_token_stats")
}

model users {
  id                        Int                         @id @default(autoincrement())
  wallet_address            String                      @unique
  username                  String?                     @unique
  email                     String?                     @unique
  nickname                  String?
  role                      UserRole                    @default(user)
  user_level_id             Int?
  created_at                DateTime?                   @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?                   @db.Timestamptz(6)
  last_login                DateTime?                   @db.Timestamptz(6)
  total_contests            Int?                        @default(0)
  is_banned                 Boolean                     @default(false)
  ban_reason                String?
  referral_code             String?                     @unique @db.VarChar(20)
  referred_by_code          String?                     @db.VarChar(20)
  experience_points         Int                         @default(0)
  last_level_up             DateTime?                   @db.Timestamptz(6)
  profile_image_url         String?                     @db.VarChar(255)
  profile_image_updated_at  DateTime?                   @db.Timestamptz(6)
  last_balance_check        DateTime?                   @db.Timestamptz(6)
  last_known_balance        BigInt?
  contest_participants      contest_participants[]
  contest_portfolio_trades  contest_portfolio_trades[]
  contest_portfolios        contest_portfolios[]
  contest_token_performance contest_token_performance[]
  contest_token_prices      contest_token_prices[]
  participant_influences    participant_influences[]
  referral_clicks           referral_clicks[]           @relation("ReferralClicksReceived")
  referral_milestones       referral_milestones[]
  referral_rankings         referral_period_rankings[]
  referral_rewards          referral_rewards[]
  referred_by               referrals[]                 @relation("ReferredByRelation")
  referrals_made            referrals[]                 @relation("ReferralsMadeRelation")
  transactions              transactions[]
  user_achievements         user_achievements[]
  user_stats                user_stats?
  user_level                user_levels?                @relation(fields: [user_level_id], references: [id])
  wallet_balances           wallet_balance_history[]
  websocket_messages        websocket_messages[]

  @@index([wallet_address], map: "idx_users_wallet")
  @@index([username], map: "idx_users_username")
  @@index([role], map: "idx_users_role")
  @@index([experience_points(sort: Desc)], map: "idx_users_experience_points")
  @@map("users")
}

model admin_logs {
  id            Int      @id @default(autoincrement())
  admin_address String   @db.VarChar
  action        String   @db.VarChar
  details       Json     @default("{}")
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  ip_address    String?  @db.VarChar
  user_agent    String?  @db.VarChar

  @@index([admin_address], map: "idx_admin_logs_admin")
  @@index([created_at], map: "idx_admin_logs_created")
  @@map("admin_logs")
}

model ai_agents {
  id             Int            @id @default(autoincrement())
  name           String         @db.VarChar
  personality    String         @db.VarChar
  risk_tolerance Int
  expertise      String[]       @db.VarChar
  created_at     DateTime       @default(now()) @db.Timestamptz(6)
  is_active      Boolean        @default(true)
  ai_decisions   ai_decisions[]

  @@map("ai_agents")
}

model ai_decisions {
  id                     Int                      @id @default(autoincrement())
  agent_id               Int
  contest_id             Int
  decision_type          AIDecisionType
  token_id               Int
  amount                 Decimal                  @db.Decimal(20, 0)
  reasoning              String                   @db.VarChar
  market_context         Json?                    @default("{}")
  external_factors       Json?                    @default("{}")
  timestamp              DateTime                 @default(now()) @db.Timestamptz(6)
  success_score          Int?
  price_impact           Decimal?                 @db.Decimal(10, 2)
  ai_agents              ai_agents                @relation(fields: [agent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  contests               contests                 @relation(fields: [contest_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tokens                 tokens                   @relation(fields: [token_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  participant_influences participant_influences[]

  @@index([contest_id, timestamp], map: "idx_ai_decisions_contest_time")
  @@index([token_id, timestamp], map: "idx_ai_decisions_token_time")
  @@map("ai_decisions")
}

model auth_challenges {
  wallet_address String    @id
  nonce          String
  expires_at     DateTime  @db.Timestamptz(6)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@index([expires_at], map: "idx_auth_challenges_expires")
  @@map("auth_challenges")
}

model blockchain_transactions {
  id           Int                @id @default(autoincrement())
  tx_hash      String             @unique @db.VarChar
  wallet_from  String             @db.VarChar
  wallet_to    String             @db.VarChar
  amount       Decimal            @db.Decimal(20, 0)
  token_type   TokenType          @default(SOL)
  chain        Chain              @default(SOLANA)
  status       transaction_status @default(pending)
  type         transaction_type
  contest_id   Int?
  created_at   DateTime           @default(now()) @db.Timestamptz(6)
  confirmed_at DateTime?          @db.Timestamptz(6)
  error        String?            @db.VarChar
  signature    String?            @db.VarChar
  slot         Int?
  contests     contests?          @relation(fields: [contest_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([contest_id], map: "idx_blockchain_transactions_contest")
  @@index([signature], map: "idx_blockchain_transactions_signature")
  @@index([tx_hash], map: "idx_blockchain_transactions_hash")
  @@index([wallet_from, wallet_to], map: "idx_blockchain_transactions_wallets")
  @@map("blockchain_transactions")
}

model contest_wallets {
  id             Int       @id @default(autoincrement())
  contest_id     Int       @unique
  wallet_address String    @db.VarChar
  private_key    String    @db.VarChar
  balance        Decimal   @db.Decimal(20, 0)
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @db.Timestamptz(6)
  last_sync      DateTime? @db.Timestamptz(6)
  contests       contests  @relation(fields: [contest_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([wallet_address], map: "idx_contest_wallets_wallet")
  @@map("contest_wallets")
}

model seed_wallets {
  wallet_address String   @id
  private_key    String
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  is_active      Boolean  @default(true)
  purpose        String?
  metadata       Json?
}

model participant_influences {
  id                  Int          @id @default(autoincrement())
  decision_id         Int
  wallet_address      String       @db.VarChar
  persuasion_score    Int
  contribution_weight Decimal      @db.Decimal(5, 2)
  timestamp           DateTime     @default(now()) @db.Timestamptz(6)
  ai_decisions        ai_decisions @relation(fields: [decision_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users               users        @relation(fields: [wallet_address], references: [wallet_address], onDelete: NoAction, onUpdate: NoAction)

  @@index([wallet_address, decision_id], map: "idx_participant_influences_lookup")
  @@map("participant_influences")
}

model system_settings {
  key         String   @id @map("key")
  value       Json
  description String?
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_by  String?  @db.VarChar(44)

  @@map("system_settings")
}

model achievement_categories {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  @@map("achievement_categories")
}

model achievement_tiers {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(20)
  color_hex  String   @db.VarChar(7)
  points     Int
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@map("achievement_tiers")
}

model user_levels {
  id                             Int      @id @default(autoincrement())
  level_number                   Int
  class_name                     String   @db.VarChar(20)
  title                          String   @db.VarChar(50)
  min_exp                        Int
  bronze_achievements_required   Int
  silver_achievements_required   Int
  gold_achievements_required     Int
  platinum_achievements_required Int
  diamond_achievements_required  Int
  icon_url                       String?  @db.VarChar(255)
  created_at                     DateTime @default(now()) @db.Timestamptz(6)
  users                          users[]

  @@map("user_levels")
}

model achievement_tier_requirements {
  id                Int      @id @default(autoincrement())
  achievement_type  String
  tier_id           Int
  requirement_value Json
  created_at        DateTime @default(now()) @db.Timestamptz(6)

  @@index([achievement_type, tier_id], map: "idx_achievement_tier_requirements_lookup")
  @@map("achievement_tier_requirements")
}

model level_rewards {
  id           Int      @id @default(autoincrement())
  level_id     Int
  reward_type  String   @db.VarChar(50)
  reward_value Json
  created_at   DateTime @default(now()) @db.Timestamptz(6)

  @@map("level_rewards")
}

model websocket_messages {
  id             Int      @id @default(autoincrement())
  type           String
  data           Json
  wallet_address String
  timestamp      DateTime @default(now()) @db.Timestamptz(6)
  delivered      Boolean  @default(false)
  users          users    @relation(fields: [wallet_address], references: [wallet_address], onDelete: NoAction, onUpdate: NoAction)

  @@index([wallet_address, type], map: "idx_websocket_messages_wallet_type")
  @@index([timestamp], map: "idx_websocket_messages_timestamp")
  @@map("websocket_messages")
}

model vanity_wallet_pool {
  id              Int       @id @default(autoincrement())
  wallet_address  String    @unique
  private_key     String
  pattern         String
  is_used         Boolean   @default(false)
  used_at         DateTime?
  used_by_contest Int?      @unique
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  contest         contests? @relation(fields: [used_by_contest], references: [id])

  @@index([is_used])
  @@index([pattern])
}

model referrals {
  id              Int            @id @default(autoincrement())
  referrer_id     String         @db.VarChar(44)
  referred_id     String         @db.VarChar(44)
  referral_code   String         @db.VarChar(20)
  status          ReferralStatus @default(pending)
  source          String?
  landing_page    String?
  utm_source      String?
  utm_medium      String?
  utm_campaign    String?
  device          String?
  browser         String?
  ip_address      String?
  user_agent      String?
  session_id      String?
  click_timestamp DateTime?      @db.Timestamptz(6)
  reward_amount   Decimal?       @db.Decimal(20, 0)
  reward_paid_at  DateTime?      @db.Timestamptz(6)
  qualified_at    DateTime?      @db.Timestamptz(6)
  created_at      DateTime       @default(now()) @db.Timestamptz(6)
  referred        users          @relation("ReferredByRelation", fields: [referred_id], references: [wallet_address], onDelete: Cascade)
  referrer        users          @relation("ReferralsMadeRelation", fields: [referrer_id], references: [wallet_address], onDelete: Cascade)

  @@index([referrer_id])
  @@index([referred_id])
  @@index([referral_code])
  @@index([status])
}

model referral_clicks {
  id            Int       @id @default(autoincrement())
  referral_code String    @db.VarChar(20)
  referrer_id   String    @db.VarChar(44)
  source        String?
  landing_page  String?
  utm_source    String?
  utm_medium    String?
  utm_campaign  String?
  device        String?
  browser       String?
  ip_address    String
  user_agent    String?
  session_id    String
  converted     Boolean   @default(false)
  converted_at  DateTime? @db.Timestamptz(6)
  timestamp     DateTime  @default(now()) @db.Timestamptz(6)
  referrer      users     @relation("ReferralClicksReceived", fields: [referrer_id], references: [wallet_address], onDelete: Cascade)

  @@index([referral_code])
  @@index([referrer_id])
  @@index([session_id])
  @@index([ip_address])
}

model referral_rewards {
  id             Int                @id @default(autoincrement())
  wallet_address String             @db.VarChar(44)
  reward_type    ReferralRewardType
  amount         Decimal            @db.Decimal(20, 0)
  description    String?
  transaction_id Int?
  created_at     DateTime           @default(now()) @db.Timestamptz(6)
  paid_at        DateTime?          @db.Timestamptz(6)
  transaction    transactions?      @relation(fields: [transaction_id], references: [id])
  users          users              @relation(fields: [wallet_address], references: [wallet_address])

  @@index([wallet_address])
  @@index([created_at])
  @@map("referral_rewards")
}

model managed_wallets {
  id                    String   @id @default(uuid())
  public_key            String   @unique @db.VarChar(44)
  encrypted_private_key String
  label                 String?  @db.VarChar(255)
  status                String   @default("active") @db.VarChar(20)
  metadata              Json?    @default("{}")
  created_at            DateTime @default(now()) @db.Timestamptz(6)
  updated_at            DateTime @updatedAt @db.Timestamptz(6)

  @@map("managed_wallets")
}

model referral_periods {
  id         Int                        @id @default(autoincrement())
  start_date DateTime                   @db.Timestamptz(6)
  end_date   DateTime                   @db.Timestamptz(6)
  is_active  Boolean                    @default(true)
  status     String                     @default("in_progress")
  created_at DateTime                   @default(now()) @db.Timestamptz(6)
  updated_at DateTime                   @default(now()) @db.Timestamptz(6)
  rankings   referral_period_rankings[]
}

model referral_period_rankings {
  id             Int              @id @default(autoincrement())
  period_id      Int
  user_id        String           @db.VarChar(44)
  referral_count Int              @default(0)
  rank           Int
  trend          String           @default("stable")
  reward_amount  Decimal?         @db.Decimal(20, 0)
  status         String           @default("pending")
  created_at     DateTime         @default(now()) @db.Timestamptz(6)
  updated_at     DateTime         @default(now()) @db.Timestamptz(6)
  period         referral_periods @relation(fields: [period_id], references: [id], onDelete: Cascade)
  user           users            @relation(fields: [user_id], references: [wallet_address], onDelete: Cascade)

  @@unique([period_id, user_id])
  @@index([period_id])
  @@index([user_id])
}

model referral_milestones {
  id              Int      @id @default(autoincrement())
  user_id         String   @db.VarChar(44)
  milestone_level Int
  referral_count  Int
  reward_amount   Decimal  @db.Decimal(20, 0)
  status          String   @default("pending")
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @db.Timestamptz(6)
  user            users    @relation(fields: [user_id], references: [wallet_address], onDelete: Cascade)

  @@unique([user_id, milestone_level])
  @@index([user_id])
}

model wallet_balance_history {
  id               Int      @id @default(autoincrement())
  wallet_address   String   @db.VarChar(44)
  balance_lamports BigInt
  timestamp        DateTime @default(now()) @db.Timestamptz(6)
  users            users    @relation(fields: [wallet_address], references: [wallet_address], onDelete: Cascade)

  @@index([wallet_address], map: "idx_wallet_balance_wallet")
  @@index([timestamp], map: "idx_wallet_balance_timestamp")
  @@map("wallet_balance_history")
}

model circuit_breaker_states {
  id                Int                         @id @default(autoincrement())
  service_name      String                      @unique
  state             String                      @default("closed")
  failure_count     Int                         @default(0)
  last_failure      DateTime?
  recovery_attempts Int                         @default(0)
  updated_at        DateTime                    @updatedAt
  config            circuit_breaker_config?
  incidents         circuit_breaker_incidents[]

  @@index([state])
  @@map("circuit_breaker_states")
}

model circuit_breaker_incidents {
  id           String                 @id @default(uuid())
  service_name String
  type         String
  severity     String
  status       String                 @default("active")
  message      String
  start_time   DateTime               @default(now())
  end_time     DateTime?
  metrics      Json?
  state        circuit_breaker_states @relation(fields: [service_name], references: [service_name])

  @@index([service_name, status])
  @@index([start_time])
  @@map("circuit_breaker_incidents")
}

model circuit_breaker_config {
  service_name      String                 @id
  failure_threshold Int                    @default(5)
  recovery_timeout  Int                    @default(30000)
  request_limit     Int                    @default(100)
  monitoring_window Int                    @default(60000)
  minimum_requests  Int                    @default(10)
  updated_at        DateTime               @updatedAt
  state             circuit_breaker_states @relation(fields: [service_name], references: [service_name])

  @@map("circuit_breaker_config")
}

enum UserRole {
  user
  admin
  superadmin
}

enum contest_status {
  pending
  active
  completed
  cancelled
}

enum transaction_status {
  pending
  completed
  failed
  reversed
}

enum transaction_type {
  CONTEST_ENTRY
  PRIZE_PAYOUT
  DEPOSIT
  WITHDRAWAL
  REFERRAL_BONUS
  PROMOTION
}

enum AIDecisionType {
  BUY
  SELL
  HOLD
  SPECIAL_EVENT
}

enum Chain {
  SOLANA
  ETHEREUM
  BSC
}

enum TokenType {
  SOL
  DUEL
  SPL
}

enum TradeType {
  BUY
  SELL
  SHORT
  CLOSE_SHORT
}

enum ReferralStatus {
  pending
  qualified
  rewarded
  expired
}

enum ReferralRewardType {
  signup_bonus
  contest_bonus
  special_event
}
